@page "/"
@page "/index/{area}"

@using nBlog.sdk.Model;
@using NBlog.Server.Services;
@using NBlog.Server.Model;
@using nBlog.sdk.ArticlePackage;
@using Toolbox.Extensions;
@using nBlog.sdk.Extensions;

@if (Area.IsEmpty())
{
    <Banner />
}

<div class="row mt-md-5">
    <div class="col-md-9">
        <div class="row">
            <span class="font-weight-light">@ArticleTitle</span>
        </div>
        <div class="row">
            @foreach (var item in Articles)
            {
                <ArticleCard ArticleCache="@item" />
            }
        </div>
    </div>

    <RightPanel />
</div>


@code {
    private const int _maxPage = 10;

    [Parameter]
    public string? Area { get; set; }

    [Inject]
    public DirectoryService DirectoryService { get; set; } = null!;

    [Inject]
    public ArticleService ArticleService { get; set; } = null!;

    private IReadOnlyList<ArticleCache> Articles { get; set; } = Array.Empty<ArticleCache>();

    private ArticleArea? SelectedArticleArea { get; set; }

    private string ArticleTitle { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        SelectedArticleArea = Area?.ToArticleAreaOrDefault();

        ArticleTitle = SelectedArticleArea switch
        {
            ArticleArea.Article => "Recent article posts ...",
            ArticleArea.Project => "Recent projects posts ...",

            _ => "Recent post ...",
        };

        IReadOnlyList<ArticleManifest> manifests = await (SelectedArticleArea switch
        {
            ArticleArea.Article => DirectoryService.ByDate(ArticleArea.Article, 0, _maxPage),
            ArticleArea.Project => DirectoryService.ByDate(ArticleArea.Project, 0, _maxPage),

            _ => DirectoryService.ForHomePage(0, _maxPage),
        });

        var list = new List<ArticleCache>();
        foreach (var item in manifests)
        {
            ArticleCache? articleCache = await ArticleService.Get(new ArticleId(item.ArticleId));
            if (articleCache == null) continue;

            list.Add(articleCache);
        }

        Articles = list;
    }
}